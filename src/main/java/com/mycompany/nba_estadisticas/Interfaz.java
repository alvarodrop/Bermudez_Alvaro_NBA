/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.nba_estadisticas;


import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.ss.usermodel.*;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;


import java.io.*;
import java.util.*;
import javax.swing.JRadioButton;
import javax.swing.JRadioButtonMenuItem;

 
public class Interfaz extends javax.swing.JFrame {
    // Variables para mantener el acumulado de FG, eFG y el n√∫mero de jugadores
    private static double totalFg = 0;
    private static double totalEfg = 0;
    private static int numeroDeJugadores = 0;
    
    
   
    
    
    
    private JSpinner anotados3Spinner;
    private JSpinner totalTiros3Spinner;
    private JSpinner anotados2Spinner;
    private JSpinner totalTiros2Spinner;
    private JSpinner anotadosLibresSpinner;
    private JSpinner totalLibresSpinner;
    private JSpinner rebotesDefSpinner;
    private JSpinner robosSpinner;
    private JSpinner taponesSpinner;
    private JSpinner asistenciasSpinner;
    private JSpinner rebotesOfSpinner;
    private JSpinner perdidasSpinner;


    

    /**
     * Creates new form Interfaz
     */
    public Interfaz() {
        initComponents();
        setSize(800, 600);
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabelTotalAnotados2 = new javax.swing.JLabel();
        jLabelTotalTiros2 = new javax.swing.JLabel();
        jLabelAnotados3 = new javax.swing.JLabel();
        libresAnotados = new javax.swing.JSpinner();
        jLabelAnotadosLibres = new javax.swing.JLabel();
        jLabelTotalTirosLibres = new javax.swing.JLabel();
        totalTiros2 = new javax.swing.JSpinner();
        anotados2 = new javax.swing.JSpinner();
        jLabelTotalTiros3 = new javax.swing.JLabel();
        totalTiros3 = new javax.swing.JSpinner();
        totalTirosLibres = new javax.swing.JSpinner();
        jLabelAnotados2 = new javax.swing.JLabel();
        anotados3 = new javax.swing.JSpinner();
        jPanel2 = new javax.swing.JPanel();
        jLabelRebotesDefensivos = new javax.swing.JLabel();
        tapones = new javax.swing.JSpinner();
        jLabelTapones = new javax.swing.JLabel();
        jLabelRobos = new javax.swing.JLabel();
        robos = new javax.swing.JSpinner();
        rebotesDefensivos = new javax.swing.JSpinner();
        jPanel3 = new javax.swing.JPanel();
        jLabelPerdidas = new javax.swing.JLabel();
        jLabelAsistencias = new javax.swing.JLabel();
        perdidas = new javax.swing.JSpinner();
        rebotesOfensivos = new javax.swing.JSpinner();
        asistencias = new javax.swing.JSpinner();
        jLabelRebotesOfensivos = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        Calcular = new javax.swing.JButton();
        jLabelNombreJugador = new javax.swing.JLabel();
        NombreJugador = new javax.swing.JTextField();
        Excel = new javax.swing.JButton();
        Partido = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar2 = new javax.swing.JMenuBar();
        Equipo = new javax.swing.JMenu();
        Atlantico = new javax.swing.JMenu();
        BostonCeltics = new javax.swing.JRadioButtonMenuItem();
        BrooklynNets = new javax.swing.JRadioButtonMenuItem();
        NYKnicks = new javax.swing.JRadioButtonMenuItem();
        Philadelphia76ers = new javax.swing.JRadioButtonMenuItem();
        TorontoRaptors = new javax.swing.JRadioButtonMenuItem();
        Pacifico = new javax.swing.JMenu();
        GoldenStateWarriors = new javax.swing.JRadioButtonMenuItem();
        LAClippers = new javax.swing.JRadioButtonMenuItem();
        LALakers = new javax.swing.JRadioButtonMenuItem();
        PhoenixSuns = new javax.swing.JRadioButtonMenuItem();
        SacramentoKings = new javax.swing.JRadioButtonMenuItem();
        Central = new javax.swing.JMenu();
        ChicagoBulls = new javax.swing.JRadioButtonMenuItem();
        ClevelandCavaliers = new javax.swing.JRadioButtonMenuItem();
        DetroitPistons = new javax.swing.JRadioButtonMenuItem();
        IndianaPacers = new javax.swing.JRadioButtonMenuItem();
        MilwakeeBucks = new javax.swing.JRadioButtonMenuItem();
        Sureste = new javax.swing.JMenu();
        AtlantaHawks = new javax.swing.JRadioButtonMenuItem();
        CharlotteHornets = new javax.swing.JRadioButtonMenuItem();
        MiamiHeats = new javax.swing.JRadioButtonMenuItem();
        OrlandoMagic = new javax.swing.JRadioButtonMenuItem();
        WhasigntonWizards = new javax.swing.JRadioButtonMenuItem();
        Suroeste = new javax.swing.JMenu();
        DallasMavericks = new javax.swing.JRadioButtonMenuItem();
        HustonRockets = new javax.swing.JRadioButtonMenuItem();
        MemphisGriezzlies = new javax.swing.JRadioButtonMenuItem();
        NewOrleandsPelicans = new javax.swing.JRadioButtonMenuItem();
        SanAntonioSpurs = new javax.swing.JRadioButtonMenuItem();
        Noroeste = new javax.swing.JMenu();
        DenverNuggets = new javax.swing.JRadioButtonMenuItem();
        MinnesotaTimberwolves = new javax.swing.JRadioButtonMenuItem();
        OklahomaCityThunder = new javax.swing.JRadioButtonMenuItem();
        PortlanTrailBlazers = new javax.swing.JRadioButtonMenuItem();
        UtahJazz = new javax.swing.JRadioButtonMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(173, 216, 230));
        setResizable(false);

        jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.RIGHT);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabelTotalAnotados2.setFont(new java.awt.Font("Microsoft JhengHei UI", 0, 12)); // NOI18N
        jLabelTotalAnotados2.setText("Total tiros de 2");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 20);
        jPanel1.add(jLabelTotalAnotados2, gridBagConstraints);

        jLabelTotalTiros2.setFont(new java.awt.Font("Microsoft JhengHei UI", 0, 12)); // NOI18N
        jLabelTotalTiros2.setText("Total tiros de 2");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 20);
        jPanel1.add(jLabelTotalTiros2, gridBagConstraints);

        jLabelAnotados3.setFont(new java.awt.Font("Microsoft JhengHei UI", 0, 12)); // NOI18N
        jLabelAnotados3.setText("Anotados de 3");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 20);
        jPanel1.add(jLabelAnotados3, gridBagConstraints);

        libresAnotados.setModel(new javax.swing.SpinnerNumberModel(0, 0, 99, 1));
        libresAnotados.setPreferredSize(new java.awt.Dimension(64, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 20);
        jPanel1.add(libresAnotados, gridBagConstraints);

        jLabelAnotadosLibres.setFont(new java.awt.Font("Microsoft JhengHei UI", 0, 12)); // NOI18N
        jLabelAnotadosLibres.setText("Anotados Libres");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 20);
        jPanel1.add(jLabelAnotadosLibres, gridBagConstraints);

        jLabelTotalTirosLibres.setFont(new java.awt.Font("Microsoft JhengHei UI", 0, 12)); // NOI18N
        jLabelTotalTirosLibres.setText("Total Tiros Libres");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 20);
        jPanel1.add(jLabelTotalTirosLibres, gridBagConstraints);

        totalTiros2.setModel(new javax.swing.SpinnerNumberModel(0, 0, 99, 1));
        totalTiros2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        totalTiros2.setPreferredSize(new java.awt.Dimension(64, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 20);
        jPanel1.add(totalTiros2, gridBagConstraints);

        anotados2.setModel(new javax.swing.SpinnerNumberModel(0, 0, 99, 1));
        anotados2.setPreferredSize(new java.awt.Dimension(64, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 20);
        jPanel1.add(anotados2, gridBagConstraints);

        jLabelTotalTiros3.setFont(new java.awt.Font("Microsoft JhengHei UI", 0, 12)); // NOI18N
        jLabelTotalTiros3.setText("Total Tiros de 3");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 20);
        jPanel1.add(jLabelTotalTiros3, gridBagConstraints);

        totalTiros3.setModel(new javax.swing.SpinnerNumberModel(0, 0, 99, 1));
        totalTiros3.setPreferredSize(new java.awt.Dimension(64, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 20);
        jPanel1.add(totalTiros3, gridBagConstraints);

        totalTirosLibres.setModel(new javax.swing.SpinnerNumberModel(0, 0, 99, 1));
        totalTirosLibres.setPreferredSize(new java.awt.Dimension(64, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 20);
        jPanel1.add(totalTirosLibres, gridBagConstraints);

        jLabelAnotados2.setFont(new java.awt.Font("Microsoft JhengHei UI", 0, 12)); // NOI18N
        jLabelAnotados2.setText("Anotados de 2");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 20);
        jPanel1.add(jLabelAnotados2, gridBagConstraints);

        anotados3.setModel(new javax.swing.SpinnerNumberModel(0, 0, 99, 1));
        anotados3.setPreferredSize(new java.awt.Dimension(64, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 20);
        jPanel1.add(anotados3, gridBagConstraints);

        jTabbedPane1.addTab("Ataque", jPanel1);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabelRebotesDefensivos.setFont(new java.awt.Font("Microsoft JhengHei UI", 0, 12)); // NOI18N
        jLabelRebotesDefensivos.setText("Rebotes Defensivos");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 20);
        jPanel2.add(jLabelRebotesDefensivos, gridBagConstraints);

        tapones.setModel(new javax.swing.SpinnerNumberModel(0, 0, 99, 1));
        tapones.setPreferredSize(new java.awt.Dimension(64, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 20);
        jPanel2.add(tapones, gridBagConstraints);

        jLabelTapones.setFont(new java.awt.Font("Microsoft JhengHei UI", 0, 12)); // NOI18N
        jLabelTapones.setText("Tapones");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 20);
        jPanel2.add(jLabelTapones, gridBagConstraints);

        jLabelRobos.setFont(new java.awt.Font("Microsoft JhengHei UI", 0, 12)); // NOI18N
        jLabelRobos.setText("Robos");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 20);
        jPanel2.add(jLabelRobos, gridBagConstraints);

        robos.setModel(new javax.swing.SpinnerNumberModel(0, 0, 99, 1));
        robos.setPreferredSize(new java.awt.Dimension(64, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 20);
        jPanel2.add(robos, gridBagConstraints);

        rebotesDefensivos.setModel(new javax.swing.SpinnerNumberModel(0, 0, 99, 1));
        rebotesDefensivos.setPreferredSize(new java.awt.Dimension(64, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 20);
        jPanel2.add(rebotesDefensivos, gridBagConstraints);

        jTabbedPane1.addTab("Defensa", jPanel2);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jLabelPerdidas.setFont(new java.awt.Font("Microsoft JhengHei UI", 0, 12)); // NOI18N
        jLabelPerdidas.setText("Perdidas de Bal√≥n");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 20);
        jPanel3.add(jLabelPerdidas, gridBagConstraints);

        jLabelAsistencias.setFont(new java.awt.Font("Microsoft JhengHei UI", 0, 12)); // NOI18N
        jLabelAsistencias.setText("Asistencias");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 20);
        jPanel3.add(jLabelAsistencias, gridBagConstraints);

        perdidas.setModel(new javax.swing.SpinnerNumberModel(0, 0, 99, 1));
        perdidas.setPreferredSize(new java.awt.Dimension(64, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 20);
        jPanel3.add(perdidas, gridBagConstraints);

        rebotesOfensivos.setModel(new javax.swing.SpinnerNumberModel(0, 0, 99, 1));
        rebotesOfensivos.setPreferredSize(new java.awt.Dimension(64, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 20);
        jPanel3.add(rebotesOfensivos, gridBagConstraints);

        asistencias.setModel(new javax.swing.SpinnerNumberModel(0, 0, 99, 1));
        asistencias.setPreferredSize(new java.awt.Dimension(64, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 20);
        jPanel3.add(asistencias, gridBagConstraints);

        jLabelRebotesOfensivos.setFont(new java.awt.Font("Microsoft JhengHei UI", 0, 12)); // NOI18N
        jLabelRebotesOfensivos.setText("Rebotes Ofensivos");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 20);
        jPanel3.add(jLabelRebotesOfensivos, gridBagConstraints);

        jTabbedPane1.addTab("Otros", jPanel3);

        jPanel4.setLayout(new java.awt.GridBagLayout());

        Calcular.setText("Calcular");
        Calcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CalcularActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel4.add(Calcular, gridBagConstraints);

        jLabelNombreJugador.setText("Nombre del Jugador");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 10, 20);
        jPanel4.add(jLabelNombreJugador, gridBagConstraints);

        NombreJugador.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        NombreJugador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NombreJugadorActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 200;
        jPanel4.add(NombreJugador, gridBagConstraints);

        Excel.setText("Excel");
        Excel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExcelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel4.add(Excel, gridBagConstraints);

        Partido.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        Partido.setToolTipText("Ingrese el Partido...");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel4.add(Partido, gridBagConstraints);

        jLabel1.setText("Partido");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel4.add(jLabel1, gridBagConstraints);

        jTabbedPane1.addTab("Menu", jPanel4);

        Equipo.setText("Equipo");

        Atlantico.setText("Atlantico");

        buttonGroup1.add(BostonCeltics);
        BostonCeltics.setText("Boston Celtics");
        Atlantico.add(BostonCeltics);

        buttonGroup1.add(BrooklynNets);
        BrooklynNets.setText("Brooklyn Nets");
        Atlantico.add(BrooklynNets);

        buttonGroup1.add(NYKnicks);
        NYKnicks.setText("NY Knicks");
        Atlantico.add(NYKnicks);

        buttonGroup1.add(Philadelphia76ers);
        Philadelphia76ers.setText("Philadelphia 76ers");
        Atlantico.add(Philadelphia76ers);

        buttonGroup1.add(TorontoRaptors);
        TorontoRaptors.setText("TorontoRaptors");
        Atlantico.add(TorontoRaptors);

        Equipo.add(Atlantico);

        Pacifico.setText("Pacifico");

        buttonGroup1.add(GoldenStateWarriors);
        GoldenStateWarriors.setText("Golden State Warriors");
        Pacifico.add(GoldenStateWarriors);

        buttonGroup1.add(LAClippers);
        LAClippers.setText("LA Clippers");
        Pacifico.add(LAClippers);

        buttonGroup1.add(LALakers);
        LALakers.setText("Los Angeles Lakers");
        Pacifico.add(LALakers);

        buttonGroup1.add(PhoenixSuns);
        PhoenixSuns.setText("Phoenix Suns");
        Pacifico.add(PhoenixSuns);

        buttonGroup1.add(SacramentoKings);
        SacramentoKings.setText("Sacramento Kings");
        Pacifico.add(SacramentoKings);

        Equipo.add(Pacifico);

        Central.setText("Central");

        buttonGroup1.add(ChicagoBulls);
        ChicagoBulls.setText("Chicago Bulls");
        Central.add(ChicagoBulls);

        buttonGroup1.add(ClevelandCavaliers);
        ClevelandCavaliers.setText("Cleveland Cavaliers");
        Central.add(ClevelandCavaliers);

        buttonGroup1.add(DetroitPistons);
        DetroitPistons.setText("Detroit Pistons");
        Central.add(DetroitPistons);

        buttonGroup1.add(IndianaPacers);
        IndianaPacers.setText("Indiana Pacers");
        Central.add(IndianaPacers);

        buttonGroup1.add(MilwakeeBucks);
        MilwakeeBucks.setText("Milwakee Bucks");
        Central.add(MilwakeeBucks);

        Equipo.add(Central);

        Sureste.setText("Sureste");

        buttonGroup1.add(AtlantaHawks);
        AtlantaHawks.setText("Atlanta Hawks");
        Sureste.add(AtlantaHawks);

        buttonGroup1.add(CharlotteHornets);
        CharlotteHornets.setText("Charlotte Hornets");
        Sureste.add(CharlotteHornets);

        buttonGroup1.add(MiamiHeats);
        MiamiHeats.setText("Miami Heats");
        Sureste.add(MiamiHeats);

        buttonGroup1.add(OrlandoMagic);
        OrlandoMagic.setText("OrlandoMagic");
        Sureste.add(OrlandoMagic);

        buttonGroup1.add(WhasigntonWizards);
        WhasigntonWizards.setText("Whasington Wizards");
        Sureste.add(WhasigntonWizards);

        Equipo.add(Sureste);

        Suroeste.setText("Suroeste");

        buttonGroup1.add(DallasMavericks);
        DallasMavericks.setText("Dallas Mavericks");
        Suroeste.add(DallasMavericks);

        buttonGroup1.add(HustonRockets);
        HustonRockets.setText("Huston Rockets");
        Suroeste.add(HustonRockets);

        buttonGroup1.add(MemphisGriezzlies);
        MemphisGriezzlies.setText("Memphis Griezzles");
        Suroeste.add(MemphisGriezzlies);

        buttonGroup1.add(NewOrleandsPelicans);
        NewOrleandsPelicans.setText("NewOrleandsPelicans");
        Suroeste.add(NewOrleandsPelicans);

        buttonGroup1.add(SanAntonioSpurs);
        SanAntonioSpurs.setText("San Antonio Spurs");
        Suroeste.add(SanAntonioSpurs);

        Equipo.add(Suroeste);

        Noroeste.setText("Noroeste");

        buttonGroup1.add(DenverNuggets);
        DenverNuggets.setText("Denver Nuggets");
        Noroeste.add(DenverNuggets);

        buttonGroup1.add(MinnesotaTimberwolves);
        MinnesotaTimberwolves.setText("Minnesota Timberwolves");
        Noroeste.add(MinnesotaTimberwolves);

        buttonGroup1.add(OklahomaCityThunder);
        OklahomaCityThunder.setText("Oklahoma City Thunder");
        Noroeste.add(OklahomaCityThunder);

        buttonGroup1.add(PortlanTrailBlazers);
        PortlanTrailBlazers.setText("Portland Trail Blazers");
        Noroeste.add(PortlanTrailBlazers);

        buttonGroup1.add(UtahJazz);
        UtahJazz.setText("Utah Jazz");
        Noroeste.add(UtahJazz);

        Equipo.add(Noroeste);

        jMenuBar2.add(Equipo);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 496, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private double calcularFG() {
        // Obtener valores
        int tiros2 = (int) anotados2.getValue();
        int tiros3 = (int) anotados3.getValue();
        int tirosTotales = (int) totalTiros2.getValue() + (int) totalTiros3.getValue();

        // Validar tiros totales
        if (tirosTotales == 0) {
            javax.swing.JOptionPane.showMessageDialog(this, "El total de tiros no puede ser 0", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return -1; // Indicar error
        }

        // Calcular FG%
        return ((double) (tiros2 + tiros3) / tirosTotales) * 100;
}

    private double calcularEFG() {
       // Obtener valores
       int tiros2 = (int) anotados2.getValue();
       int tiros3 = (int) anotados3.getValue();
       int tirosTotales = (int) totalTiros2.getValue() + (int) totalTiros3.getValue();

       // Validar tiros totales
       if (tirosTotales == 0) {
           javax.swing.JOptionPane.showMessageDialog(this, "El total de tiros no puede ser 0", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
           return -1; // Indicar error
       }

       // Calcular eFG%
       return ((tiros2 + (0.5 * tiros3)) / tirosTotales) * 100;
   }
    
    
    private double calcularTS() {
        // Obtener valores desde los JSpinners
        int puntosTotales = (int) anotados2.getValue() * 2 + (int) anotados3.getValue() * 3 + (int) libresAnotados.getValue();
        int intentosTirosCampo = Integer.parseInt(totalTiros2.getValue().toString()) + Integer.parseInt(totalTiros3.getValue().toString());
        int intentosTirosLibres = Integer.parseInt(totalTirosLibres.getValue().toString());

        // Validar intentos
        if (intentosTirosCampo == 0 && intentosTirosLibres == 0) {
            javax.swing.JOptionPane.showMessageDialog(this, "Los intentos totales de tiros no pueden ser 0", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return -1; // Indicar error
        }

        // Calcular %TS
        return (puntosTotales / (2.0 * (intentosTirosCampo + 0.44 * intentosTirosLibres))) * 100;
    }
    
    
    private int calcularValoracion() {
        // Obtener valores
        int puntosTotales = (int) anotados2.getValue() * 2 + (int) anotados3.getValue() * 3 + (int) libresAnotados.getValue();
        int rebotesTotales = (int) rebotesDefensivos.getValue() + (int) rebotesOfensivos.getValue();
        int asistenciasTotales = (int) asistencias.getValue();
        int robosTotales = (int) robos.getValue();
        int taponesTotales = (int) tapones.getValue();
        int perdidasTotales = (int) perdidas.getValue();

        int intentosTirosCampo = Integer.parseInt(totalTiros2.getValue().toString()) + Integer.parseInt(totalTiros3.getValue().toString());
        int anotadosTirosCampo = (int) anotados2.getValue() + (int) anotados3.getValue();
        int intentosTirosLibres = Integer.parseInt(totalTirosLibres.getValue().toString());
        int anotadosTirosLibres = (int) libresAnotados.getValue();

        // Calcular valoraci√≥n
        return (puntosTotales + rebotesTotales + asistenciasTotales + robosTotales + taponesTotales)
                - (perdidasTotales + (intentosTirosCampo - anotadosTirosCampo) + (intentosTirosLibres - anotadosTirosLibres));
    }
    
    private void CalcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CalcularActionPerformed
            // Llamamos a la funci√≥n para obtener el nombre
        String nombreJugador = obtenerNombreJugador();

        // Realizamos los c√°lculos
        double fg = calcularFG();
        double efg = calcularEFG();
        double ts = calcularTS();
        int valoracion = calcularValoracion();

        // Mostrar resultados
        if (fg != -1 && efg != -1 && ts != -1) {
            javax.swing.JOptionPane.showMessageDialog(this, 
                "Jugador: " + nombreJugador + "\n" + // Mostramos el nombre del jugador
                "FG%: " + String.format("%.2f", fg) + "%\n" + 
                "eFG%: " + String.format("%.2f", efg) + "%\n" + 
                "TS%: " + String.format("%.2f", ts) + "%\n" + 
                "Valoraci√≥n: " + valoracion, 
                "Resultados", javax.swing.JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_CalcularActionPerformed

    private void NombreJugadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NombreJugadorActionPerformed
        // TODO add your handling code here:
        String nombre = NombreJugador.getText().trim();
        jLabelNombreJugador.setText(nombre); // Asigna el texto capturado al JLabel

    }//GEN-LAST:event_NombreJugadorActionPerformed
       
    public String obtenerPartido(){
        return Partido.getText().trim(); 
    }
    public String obtenerNombreEquipo() {
       // Recorrer los JRadioButtonMenuItem para verificar cu√°l est√° seleccionado
       if (AtlantaHawks.isSelected()) {
           return "Atlanta Hawks";
       } else if (BostonCeltics.isSelected()) {
           return "Boston Celtics";
       } else if (BrooklynNets.isSelected()) {
           return "Brooklyn Nets";
       } else if (CharlotteHornets.isSelected()) {
           return "Charlotte Hornets";
       } else if (ChicagoBulls.isSelected()) {
           return "Chicago Bulls";
       } else if (ClevelandCavaliers.isSelected()) {
           return "Cleveland Cavaliers";
       } else if (DallasMavericks.isSelected()) {
           return "Dallas Mavericks";
       } else if (DenverNuggets.isSelected()) {
           return "Denver Nuggets";
       } else if (DetroitPistons.isSelected()) {
           return "Detroit Pistons";
       } else if (GoldenStateWarriors.isSelected()) {
           return "Golden State Warriors";
       } else if (HustonRockets.isSelected()) {
           return "Houston Rockets";
       } else if (IndianaPacers.isSelected()) {
           return "Indiana Pacers";
       } else if (LAClippers.isSelected()) {
           return "LA Clippers";
       } else if (LALakers.isSelected()) {
           return "LA Lakers";
       } else if (MemphisGriezzlies.isSelected()) {
           return "Memphis Grizzlies";
       } else if (MiamiHeats.isSelected()) {
           return "Miami Heat";
       } else if (MilwakeeBucks.isSelected()) {
           return "Milwaukee Bucks";
       } else if (MinnesotaTimberwolves.isSelected()) {
           return "Minnesota Timberwolves";
       } else if (NYKnicks.isSelected()) {
           return "NY Knicks";
       } else if (NewOrleandsPelicans.isSelected()) {
           return "New Orleans Pelicans";
       } else if (OklahomaCityThunder.isSelected()) {
           return "Oklahoma City Thunder";
       } else if (OrlandoMagic.isSelected()) {
           return "Orlando Magic";
       } else if (Philadelphia76ers.isSelected()) {
           return "Philadelphia 76ers";
       } else if (PhoenixSuns.isSelected()) {
           return "Phoenix Suns";
       } else if (PortlanTrailBlazers.isSelected()) {
           return "Portland Trail Blazers";
       } else if (SacramentoKings.isSelected()) {
           return "Sacramento Kings";
       } else if (SanAntonioSpurs.isSelected()) {
           return "San Antonio Spurs";
       } else if (TorontoRaptors.isSelected()) {
           return "Toronto Raptors";
       } else if (UtahJazz.isSelected()) {
           return "Utah Jazz";
       } else if (WhasigntonWizards.isSelected()) {
           return "Washington Wizards";
       } else {
           return "Ning√∫n equipo seleccionado";
       }
   }

    
    private void ExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExcelActionPerformed
    try {
        // Recoge los valores de los campos de texto
        String nombreJugador = obtenerNombreJugador();
        String nombreEquipo = obtenerNombreEquipo();
        String partido = obtenerPartido();

        // Obtener valores de los spinners
        int tiros3 = (int) anotados3.getValue();
        int totalDeTiros3 = (int) totalTiros3.getValue();
        int tiros2 = (int) anotados2.getValue();
        int totalDeTiros2 = (int) totalTiros2.getValue();  
        int tirosAnotadosLibres = (int) libresAnotados.getValue();
        int tirosTotalLibres = (int) totalTirosLibres.getValue();
        int rebotesDef = (int) rebotesDefensivos.getValue();
        int Robos = (int) robos.getValue();
        int Tapones = (int) tapones.getValue();
        int asistenciasTotales = (int) asistencias.getValue();
        int rebotesOf = (int) rebotesOfensivos.getValue();
        int Perdidas = (int) perdidas.getValue();

        // Llamada a los m√©todos para calcular FG, EFG y Valoraci√≥n
        double fg = calcularFG();
        double efg = calcularEFG();
        double valoracion = calcularValoracion(); // M√©todo que calcula la valoraci√≥n

        // Llamada al m√©todo guardarExcel con todos los par√°metros necesarios
        guardarEnExcel(partido, nombreEquipo,nombreJugador, tiros2, tiros3, totalDeTiros2, totalDeTiros3, tirosTotalLibres, fg, efg, valoracion);

        JOptionPane.showMessageDialog(this, "Datos guardados en Excel con √©xito.", "√âxito", JOptionPane.INFORMATION_MESSAGE);
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error al guardar los datos en Excel: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
    }//GEN-LAST:event_ExcelActionPerformed

    private String obtenerNombreJugador() {
        return NombreJugador.getText().trim(); // Aseg√∫rate de usar el JTextField correcto
    }



    private static final String FILE_PATH = "C:\\GradoSuperior\\2¬∫\\DI\\NBA_Estadisticas\\NBA_Estadisticas\\src\\main\\java\\com\\mycompany\\nba_estadisticas";

    
    
    public void guardarEnExcel(String partido, String nombreEquipo, String nombreJugador, int anotados2, int anotados3, int totalTiros2, int totalTiros3, int totalTirosLibres, double fg, double efg, double valoracion) {
    
    
        String nombreArchivo = FILE_PATH + "_" + nombreEquipo + ".xlsx";
        File excelFile = new File(nombreArchivo);
        Workbook workbook = null;

        try {
            // Abrir o crear el archivo Excel
            if (!excelFile.exists()) {
                workbook = new XSSFWorkbook();
            } else {
                FileInputStream fileInputStream = new FileInputStream(excelFile);
                workbook = new XSSFWorkbook(fileInputStream);
            }

            // Obtener o crear la hoja
            Sheet sheet = workbook.getSheet(nombreJugador);
            if (sheet == null) {
                sheet = workbook.createSheet(nombreJugador);
                crearEncabezados(sheet);
            }

            // Calcular puntos totales y TS%
            int puntosTotales = (2 * anotados2) + (3 * anotados3) + totalTirosLibres;
            double ts = 0;
            if (totalTiros2 + totalTiros3 + 0.44 * totalTirosLibres > 0) {
                ts = (puntosTotales / (2.0 * (totalTiros2 + totalTiros3 + 0.44 * totalTirosLibres))) * 100;
            }

            // Eliminar fila de promedios si existe
            int lastRowNum = sheet.getPhysicalNumberOfRows();
            if (lastRowNum > 1 && "Promedios".equals(sheet.getRow(lastRowNum - 1).getCell(0).getStringCellValue())) {
                sheet.removeRow(sheet.getRow(lastRowNum - 1));
                lastRowNum--;
            }

            // Crear nueva fila con datos del jugador
            Row newRow = sheet.createRow(lastRowNum);
            newRow.createCell(0).setCellValue(partido);
            newRow.createCell(1).setCellValue(anotados2);
            newRow.createCell(2).setCellValue(anotados3);
            newRow.createCell(3).setCellValue(totalTiros2);
            newRow.createCell(4).setCellValue(totalTiros3);
            newRow.createCell(5).setCellValue(totalTiros2 + totalTiros3);
            newRow.createCell(6).setCellValue(fg);
            newRow.createCell(7).setCellValue(efg);
            newRow.createCell(8).setCellValue(ts); // Nueva columna TS%
            newRow.createCell(9).setCellValue(valoracion); // Nueva columna Valoraci√≥n (ahora es double)

            // Calcular promedios
            double totalFg = 0, totalEfg = 0, totalTs = 0, totalValoracion = 0;
            for (int i = 1; i <= lastRowNum; i++) {
                Row row = sheet.getRow(i);
                totalFg += row.getCell(6).getNumericCellValue();
                totalEfg += row.getCell(7).getNumericCellValue();
                totalTs += row.getCell(8).getNumericCellValue();
                totalValoracion += row.getCell(9).getNumericCellValue();
            }

            int numeroDeJugadores = lastRowNum;
            Row promedioRow = sheet.createRow(lastRowNum + 1);
            promedioRow.createCell(0).setCellValue("Promedios");
            promedioRow.createCell(6).setCellValue(totalFg / numeroDeJugadores);
            promedioRow.createCell(7).setCellValue(totalEfg / numeroDeJugadores);
            promedioRow.createCell(8).setCellValue(totalTs / numeroDeJugadores);
            promedioRow.createCell(9).setCellValue(totalValoracion / numeroDeJugadores);

            // Guardar el archivo Excel
            try (FileOutputStream fileOut = new FileOutputStream(excelFile)) {
                workbook.write(fileOut);
                System.out.println("Archivo Excel guardado correctamente.");
            }

        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (workbook != null) {
                    workbook.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    private void crearEncabezados(Sheet sheet) {
        Row headerRow = sheet.createRow(0);
        headerRow.createCell(0).setCellValue("Partido");
        headerRow.createCell(1).setCellValue("Anotados 2");
        headerRow.createCell(2).setCellValue("Anotados 3");
        headerRow.createCell(3).setCellValue("Tiros de 2");
        headerRow.createCell(4).setCellValue("Tiros de 3");
        headerRow.createCell(5).setCellValue("Total Tiros");
        headerRow.createCell(6).setCellValue("FG (%)");
        headerRow.createCell(7).setCellValue("eFG (%)");
        headerRow.createCell(8).setCellValue("TS (%)");
        headerRow.createCell(9).setCellValue("Valoraci√≥n");
    }




    private void eliminarFilaPromedios(Sheet sheet) {
        int lastRowNum = sheet.getPhysicalNumberOfRows() - 1;
        Row lastRow = sheet.getRow(lastRowNum);

        if (lastRow != null && "Promedios".equalsIgnoreCase(lastRow.getCell(0).getStringCellValue())) {
            sheet.removeRow(lastRow);
        }
    }

    private void recalcularPromedios(Sheet sheet) {
        double totalFg = 0.0;
        double totalEfg = 0.0;
        int numeroDeJugadores = 0;

        for (int i = 1; i < sheet.getPhysicalNumberOfRows(); i++) { // Ignorar encabezados
            Row row = sheet.getRow(i);
            if (row != null && row.getCell(6) != null && row.getCell(7) != null) {
                totalFg += row.getCell(6).getNumericCellValue();
                totalEfg += row.getCell(7).getNumericCellValue();
                numeroDeJugadores++;
            }
        }

        if (numeroDeJugadores > 0) {
            double promedioFg = totalFg / numeroDeJugadores;
            double promedioEfg = totalEfg / numeroDeJugadores;

            int promedioRowNum = sheet.getPhysicalNumberOfRows(); // Despu√©s de la √∫ltima fila de datos
            Row promedioRow = sheet.createRow(promedioRowNum);
            promedioRow.createCell(0).setCellValue("Promedios");
            promedioRow.createCell(6).setCellValue(promedioFg);
            promedioRow.createCell(7).setCellValue(promedioEfg);
        }
    }





    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interfaz().setVisible(true);
            }
        });
    }
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButtonMenuItem AtlantaHawks;
    private javax.swing.JMenu Atlantico;
    private javax.swing.JRadioButtonMenuItem BostonCeltics;
    private javax.swing.JRadioButtonMenuItem BrooklynNets;
    private javax.swing.JButton Calcular;
    private javax.swing.JMenu Central;
    private javax.swing.JRadioButtonMenuItem CharlotteHornets;
    private javax.swing.JRadioButtonMenuItem ChicagoBulls;
    private javax.swing.JRadioButtonMenuItem ClevelandCavaliers;
    private javax.swing.JRadioButtonMenuItem DallasMavericks;
    private javax.swing.JRadioButtonMenuItem DenverNuggets;
    private javax.swing.JRadioButtonMenuItem DetroitPistons;
    private javax.swing.JMenu Equipo;
    private javax.swing.JButton Excel;
    private javax.swing.JRadioButtonMenuItem GoldenStateWarriors;
    private javax.swing.JRadioButtonMenuItem HustonRockets;
    private javax.swing.JRadioButtonMenuItem IndianaPacers;
    private javax.swing.JRadioButtonMenuItem LAClippers;
    private javax.swing.JRadioButtonMenuItem LALakers;
    private javax.swing.JRadioButtonMenuItem MemphisGriezzlies;
    private javax.swing.JRadioButtonMenuItem MiamiHeats;
    private javax.swing.JRadioButtonMenuItem MilwakeeBucks;
    private javax.swing.JRadioButtonMenuItem MinnesotaTimberwolves;
    private javax.swing.JRadioButtonMenuItem NYKnicks;
    private javax.swing.JRadioButtonMenuItem NewOrleandsPelicans;
    private javax.swing.JTextField NombreJugador;
    private javax.swing.JMenu Noroeste;
    private javax.swing.JRadioButtonMenuItem OklahomaCityThunder;
    private javax.swing.JRadioButtonMenuItem OrlandoMagic;
    private javax.swing.JMenu Pacifico;
    private javax.swing.JTextField Partido;
    private javax.swing.JRadioButtonMenuItem Philadelphia76ers;
    private javax.swing.JRadioButtonMenuItem PhoenixSuns;
    private javax.swing.JRadioButtonMenuItem PortlanTrailBlazers;
    private javax.swing.JRadioButtonMenuItem SacramentoKings;
    private javax.swing.JRadioButtonMenuItem SanAntonioSpurs;
    private javax.swing.JMenu Sureste;
    private javax.swing.JMenu Suroeste;
    private javax.swing.JRadioButtonMenuItem TorontoRaptors;
    private javax.swing.JRadioButtonMenuItem UtahJazz;
    private javax.swing.JRadioButtonMenuItem WhasigntonWizards;
    private javax.swing.JSpinner anotados2;
    private javax.swing.JSpinner anotados3;
    private javax.swing.JSpinner asistencias;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelAnotados2;
    private javax.swing.JLabel jLabelAnotados3;
    private javax.swing.JLabel jLabelAnotadosLibres;
    private javax.swing.JLabel jLabelAsistencias;
    private javax.swing.JLabel jLabelNombreJugador;
    private javax.swing.JLabel jLabelPerdidas;
    private javax.swing.JLabel jLabelRebotesDefensivos;
    private javax.swing.JLabel jLabelRebotesOfensivos;
    private javax.swing.JLabel jLabelRobos;
    private javax.swing.JLabel jLabelTapones;
    private javax.swing.JLabel jLabelTotalAnotados2;
    private javax.swing.JLabel jLabelTotalTiros2;
    private javax.swing.JLabel jLabelTotalTiros3;
    private javax.swing.JLabel jLabelTotalTirosLibres;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JSpinner libresAnotados;
    private javax.swing.JSpinner perdidas;
    private javax.swing.JSpinner rebotesDefensivos;
    private javax.swing.JSpinner rebotesOfensivos;
    private javax.swing.JSpinner robos;
    private javax.swing.JSpinner tapones;
    private javax.swing.JSpinner totalTiros2;
    private javax.swing.JSpinner totalTiros3;
    private javax.swing.JSpinner totalTirosLibres;
    // End of variables declaration//GEN-END:variables
}
